int Nbnoeuds=10;
//func f=x*y;
func f=8*pi^2* sin(2*pi*x)*sin(2*pi*y);
func uex=sin(2*pi*x)*sin(2*pi*y);
func uexdx=2*pi*cos(2*pi*x)*sin(2*pi*y);
func uexdy=2*pi*cos(2*pi*y)*sin(2*pi*x);
real[int] L2error(5);
real[int] H1error(5);
real cpu=clock();
for (int n=0;n<5;n++)
	{
	  mesh Th=square(Nbnoeuds*2^(n),Nbnoeuds*2^(n),[x,y]); 
	fespace Vh(Th,P2);
	Vh uh,vh;
	problem chaleur(uh,vh,solver=LU)=int2d(Th)(dx(uh)*dx(vh)+dy(uh)*dy(vh))-int2d(Th)(f*vh)+on(1,2,3,4,uh=0);
	chaleur;
//	plot(Th,uh,wait=1);
	L2error[n]=sqrt(int2d(Th)((uh-uex)^2));
	H1error[n]=sqrt(int2d(Th)((dx(uh)-uexdx)^2)+int2d(Th)((dy(uh)-uexdy)^2));; 
}
for(int n=0;n<5;n++)
{
cout << " L2error " << n << " = "<< L2error[n] <<endl;
cout <<" convergence rate = "<< log(L2error[0]/L2error[4])/log(16.) <<endl;
cout << " H1error " << n << " = "<< H1error[n] <<endl;
cout <<" taux de convergence = "<< log(H1error[0]/H1error[4])/log(16.) <<endl;
cout << " temps = "<< clock()- cpu <<endl ;
}
